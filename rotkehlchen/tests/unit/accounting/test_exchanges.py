from collections import defaultdict
from unittest.mock import patch

import pytest

from rotkehlchen.accounting.mixins.event import AccountingEventType
from rotkehlchen.tests.utils.accounting import accounting_create_and_process_history
from rotkehlchen.tests.utils.exchanges import mock_normal_coinbase_query
from rotkehlchen.tests.utils.history import prices
from rotkehlchen.types import Location


@pytest.mark.parametrize(
    'added_exchanges',
    [(Location.COINBASE,)],
)
@pytest.mark.parametrize('ethereum_accounts', [[]])
@pytest.mark.parametrize('mocked_price_queries', [prices])
def test_account_for_coinbase_ledger_actions(rotkehlchen_api_server_with_exchanges):
    """
    Test that ledger actions generated by coinbase are taken into account in accounting
    """
    rotki = rotkehlchen_api_server_with_exchanges.rest_api.rotkehlchen
    coinbase = rotki.exchange_manager.get_exchange('coinbase', Location.COINBASE)

    with patch.object(coinbase.session, 'get', side_effect=mock_normal_coinbase_query):
        report, events = accounting_create_and_process_history(rotki=rotki, start_ts=0, end_ts=1611426233)  # noqa: E501

    expected_total_actions = 10
    assert report['total_actions'] == expected_total_actions
    events_map = defaultdict(int)
    for event in events:
        events_map[event.type] += 1

    events_map.pop(AccountingEventType.PREFORK_ACQUISITION)
    assert events_map[AccountingEventType.LEDGER_ACTION] == 2
    assert events_map[AccountingEventType.TRADE] == 4
    assert events_map[AccountingEventType.FEE] == 2
    assert events_map[AccountingEventType.ASSET_MOVEMENT] == 3
    assert sum(events_map.values()) == 11  # processed events
